import time
import requests
import yfinance as yf
import pytz
from datetime import datetime
from statistics import mean

# üîê –¢–≤–æ–∏ –∫–ª—é—á–∏
CMC_API_KEY = "69c96f60-ca43-480a-83a0-63cdb2c43fb3"
TG_TOKEN = "7533119295:AAG_Hnudjc4hF4ZthROX2_smvvSJ1hk3k6o"
TG_CHAT_ID = "5556108366"

# üîÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã
CRYPTO_PAIRS = ["BTC-USD", "ETH-USD", "BNB-USD", "XRP-USD", "SOL-USD"]

# üìä –û–±—ä—ë–º
def get_volume_analysis(data):
    volumes = data['Volume'].tail(10)
    avg_volume = volumes.mean()
    current_volume = volumes.iloc[-1]
    return "üìà –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å" if current_volume > avg_volume * 1.2 else "üìâ –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å"

# üïØ –°–≤–µ—á–∏
def get_candle_signal(data):
    last = data.tail(2)
    if last.iloc[-1]['Close'] > last.iloc[-1]['Open'] and last.iloc[-2]['Close'] < last.iloc[-2]['Open']:
        return "–ë—ã—á–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç"
    elif last.iloc[-1]['Close'] < last.iloc[-1]['Open'] and last.iloc[-2]['Close'] > last.iloc[-2]['Open']:
        return "–ú–µ–¥–≤–µ–∂–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç"
    else:
        return "–°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç"

# üì∞ –ù–æ–≤–æ—Å—Ç–∏
def get_news_recommendation():
    headers = {'X-CMC_PRO_API_KEY': CMC_API_KEY}
    url = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest'
    try:
        r = requests.get(url, headers=headers, timeout=10)
        return "üì¢ –ù–æ–≤–æ—Å—Ç–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ. –ú–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å." if r.status_code == 200 else "‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã."
    except:
        return "‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

# üì° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
def get_signal(pair):
    data = yf.download(pair, period="2d", interval="1h", progress=False)
    if data.empty:
        return None

    candle_signal = get_candle_signal(data)
    volume_info = get_volume_analysis(data)
    trend = "–†–æ—Å—Ç" if data['Close'].iloc[-1] > data['Close'].iloc[-5] else "–ü–∞–¥–µ–Ω–∏–µ"
    price_now = data['Close'].iloc[-1]

    if candle_signal == "–°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç":
        return None

    confidence = round(abs(data['Close'].pct_change().tail(5).mean()) * 100, 2)
    return {
        "pair": pair,
        "price": price_now,
        "signal": candle_signal,
        "volume": volume_info,
        "trend": trend,
        "confidence": confidence,
        "duration": 15 if trend == "–†–æ—Å—Ç" else 10
    }

# üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    payload = {
        "chat_id": TG_CHAT_ID,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        requests.post(url, data=payload, timeout=10)
    except:
        pass

# üîÅ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
def main():
    while True:
        utc_now = datetime.now(pytz.utc)
        if utc_now.weekday() < 5 or utc_now.hour in range(8, 24):
            for pair in CRYPTO_PAIRS:
                result = get_signal(pair)
                if result is not None:
                    message = (
                        f"üìä <b>–°–∏–≥–Ω–∞–ª –¥–ª—è: {result['pair']}</b>\n"
                        f"üíµ –¶–µ–Ω–∞: {result['price']:.2f}$\n"
                        f"üïØ –°–≤–µ—á–∞: {result['signal']}\n"
                        f"üìâ –û–±—ä—ë–º: {result['volume']}\n"
                        f"üìà –¢—Ä–µ–Ω–¥: {result['trend']}\n"
                        f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}%\n"
                        f"‚è± –°–¥–µ–ª–∫–∞ –Ω–∞: {result['duration']} –º–∏–Ω.\n"
                        f"üì∞ –ù–æ–≤–æ—Å—Ç–∏: {get_news_recommendation()}"
                    )
                    send_telegram_message(message)
                else:
                    send_telegram_message(f"üîç –ü–∞—Ä–∞ {pair}: –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç.")
        else:
            send_telegram_message("‚è∞ –ù–µ—É–¥–∞—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏. –ñ–¥–∏ –ª—É—á—à–µ–µ –æ–∫–Ω–æ.")

        time.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∞

if __name__ == "__main__":
    main()

